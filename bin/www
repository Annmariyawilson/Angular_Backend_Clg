// bin/www

import http from 'http';
import debugLib from 'debug';
import app from '../app.js';
import connectDb from './config.js';

const debug = debugLib('HCCMAT:server');
const PORT = normalizePort(process.env.PORT || '3000');
app.set('port', PORT);

// Connect to MongoDB and start server
connectDb()
  .then(() => {
    const server = http.createServer(app);

    server.listen(PORT);
    server.on('error', onError);
    server.on('listening', () => {
      const addr = server.address();
      const bind = typeof addr === 'string' ? `pipe ${addr}` : `port ${addr.port}`;
      debug(`✅ Server is listening on ${bind}`);
      console.log(`🚀 Server running at http://localhost:${PORT}`);
    });

    // Optional: Handle graceful shutdown (SIGINT)
    process.on('SIGINT', () => {
      console.log('\n🛑 Server shutting down...');
      server.close(() => {
        console.log('✅ Server closed.');
        process.exit(0);
      });
    });
  })
  .catch((err) => {
    console.error('❌ Failed to connect to MongoDB:', err);
    process.exit(1);
  });

// Normalize port
function normalizePort(val) {
  const port = parseInt(val, 10);
  if (isNaN(port)) return val;
  if (port >= 0) return port;
  return false;
}

// Error listener
function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof PORT === 'string' ? `Pipe ${PORT}` : `Port ${PORT}`;

  switch (error.code) {
    case 'EACCES':
      console.error(`${bind} requires elevated privileges`);
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(`${bind} is already in use`);
      process.exit(1);
      break;
    default:
      throw error;
  }
}

// Catch unhandled errors to trigger PM2 auto-restart
process.on('uncaughtException', (err) => {
  console.error('❌ Uncaught Exception:', err);
  process.exit(1);
});

process.on('unhandledRejection', (reason, promise) => {
  console.error('❌ Unhandled Rejection at:', promise, 'reason:', reason);
  process.exit(1);
});
